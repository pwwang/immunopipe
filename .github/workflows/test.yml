name: test

on: push
permissions:
  contents: write

jobs:
  # only when essential files are changed
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      source: ${{ steps.filter.outputs.source }}
      tests: ${{ steps.filter.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            source:
              - 'docker/**'
              - 'immunopipe/**'
              - 'board.toml'
              - 'Dockerfile'
              - 'Dockerfile.full'
              - 'pyproject.toml'
            tests:
              - 'tests/**'

  local:
    needs: changes
    if: ${{ needs.changes.outputs.source == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry config virtualenvs.create false
          poetry install -v
      - name: Check if immunopipe is installed successfully
        run: |
          if ! immunopipe --help; then
            echo "immunopipe is not installed successfully"
            # print the error
            immunopipe --help
            exit 1
          else # test if the TEST_STRING is in the help message
            if ! immunopipe --help | grep -q "$TEST_STSRING"; then
              echo "immunopipe is not installed successfully"
              # print the error
              immunopipe --help
              exit 1
            fi
          fi
        env:
          TEST_STRING: "Integrative analysis for scRNA-seq and scTCR-seq data"

  test:
    needs: changes
    if: ${{ needs.changes.outputs.source == 'true' || needs.changes.outputs.tests == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: micromamba-shell {0}
    steps:
      - uses: actions/checkout@v4
      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: docker/environment_full.yml
          environment-name: immunopipe
          # Do not cache the environment in case of the package update
          # from the conda channels
          cache-downloads: true
          generate-run-shell: true
      - name: Install immunopipe
        run: |
          pip install -U poetry
          poetry install -E diagram -E runinfo
      - name: Check if immunopipe is installed successfully
        run: |
          if ! immunopipe --help; then
            echo "immunopipe is not installed successfully"
            # print the error
            immunopipe --help
            exit 1
          else # test if the TEST_STRING is in the help message
            if ! immunopipe --help | grep -q "$TEST_STSRING"; then
              echo "immunopipe is not installed successfully"
              # print the error
              immunopipe --help
              exit 1
            fi
          fi
        env:
          TEST_STRING: "Integrative analysis for scRNA-seq and scTCR-seq data"
      - name: Cache input data
        id: cache-input
        uses: actions/cache@v3
        with:
          path: tests/data/prepared
          key: input-${{ hashFiles('Makefile') }}
      - name: Download input data
        if: steps.cache-input.outputs.cache-hit != 'true'
        run: make test-data
      - name: Run tests
        run: make test
      - name: Add README.md to tests/output
        run: |
          echo "# Tests output for immunopipe" > tests/output/README.md
          echo "" >> tests/output/README.md
          echo "This directory contains the output of the tests for immunopipe" >> tests/output/README.md
          echo "" >> tests/output/README.md
          echo "The output can be used for documentation purposes" >> tests/output/README.md
      - name: Create .gitignore for tests/output
        run: echo "**/*.RDS" > tests/output/.gitignore
      - name: Deploy output to tests-output branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: tests/output
          branch: tests-output
          token: ${{ secrets.GITHUB_TOKEN }}
          force: true

  build:
    needs: [changes, local, test]
    if: |
      !contains(needs.*.result, 'failure')
      && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/build.yml
    secrets: inherit
